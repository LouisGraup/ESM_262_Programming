{
  "articles": [
    {
      "path": "assignments.html",
      "title": "Assignments",
      "author": [],
      "contents": "\n\nContents\nAssignment materials and dates\nAssignment expectations and grading\n\n\n\nTO UPDATE THIS PAGE: Open and edit the assignments.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nAssignment materials and dates\nAssignment materials\nAssigned\nDue date\nA link to the repo\n2021-01-01\n2021-01-08\nA link to the repo\n2021-01-15\n2021-01-23\nA link to the repo\n2021-02-01\n2021-02-09\nA link to the repo\n2021-02-14\n2021-02-23\nAssignment expectations and grading\nThis might also go on the home page & in syllabus\nOr could reinforce here\n\n\n\n\n",
      "last_modified": "2022-01-07T10:26:51-08:00"
    },
    {
      "path": "index.html",
      "title": "ESM 232 Computing for Environmental Science",
      "description": "Introduction to computing for data management and analysis for environmental applications. The course provides MESM students with the basic computing and programming skills used in data science.",
      "author": [],
      "contents": "\n\nContents\nWelcome ESM 262How class will work:\n\nCourse description\nTeaching team\nImportant links\nWeekly course schedule\nLearning objectives\nCourse requirementsComputing\nAssignments\n\nTentative topics\n\n\n\n\nFigure 1: Growing skills\n\n\n\nWelcome ESM 262\nHow class will work:\nBefore each class, I will give you an Rmarkdown document to review, In class I will provide some lecture materials, and we will briefly go through the Rmarkdown document, I’ll answer questions and add some additional comments, then we will do an in class exercise Assignments will usually evolve from this exercise.\nAll materials will be available on this website\n\nTO UPDATE THIS PAGE: Open and edit the index.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nCourse description\n\nNOTE: A lot of this home page information can be directly from your syllabus.\n\nESM 262 is an introduction to computing for environmental applications. The course provides practical training in software design best practices. Topics include programming language concepts; modular program design; data structures and flow control, version control, testing, documentation and reproducibility. The course features R for programming, Git for version control, Markdown for workflow, and GitHub for collaboration and publishing, but many concepts would be applicable in other software design tools. Class will include a mix of lectures and hands-on examples, using students’ own computers.\nTeaching team\nInstructor: Naomi Tague (www.tagueteamlab.org)\nOffice hours: Friday 9pm - 11pm\n**email** (tague@ucsb.edu)\nTeaching assistant: Louis Graup\nOffice hours: Saturday 7am - 8am\nemail (lgraup@bren.ucsb.edu)\nImportant links\nLink to full course syllabus (here is the MEDS optional syllabus template)\nLink to Code of Conduct (Bren / UCSB)\nLink to course GitHub Classroom, other essential resources\nWeekly course schedule\nLectures: MW 8am - 9:15am (Warehouse Room 1)\nLabs: Th 10am - 12pm (Warehouse Room 2)\nLearning objectives\nCourse requirements\nComputing\nMake sure you have installed git, R, R-studio\nPlease bring your laptop to class\nMake sure you have a Github account\nAssignments\nThere will be 6 short assignment (more or less one for each class). You will usually have time to work on the assignment in class and most will be in groups. We’ll evaluate your assignments by pulling the GitHub repository that they live in.\nTo set this up:\nCreate a single private git hub repo to hold all of your assignments (and nothing else!).\nInvite Will (LouisGraup) and Naomi (naomitague`) to collaborate on this repo.\nThen, for each assignment:\nPut your solution, and all the files needed to run it, in its own folder within the repo.\nSubmit the URL of the folder on Gauchospace\nTentative topics\nClass\nLecture topics\nLab topics\n1\nTopics\nTopics\n2\nTopics\nTopics\n3\nTopics\nTopics\n4\nTopics\nTopics\n5\nTopics\nTopics\n6\nTopics\nTopics\n7\nTopics\nTopics\n8\nTopics\nTopics\n9\nTopics\nTopics\n10\nTopics\nTopics\n\n\n\n",
      "last_modified": "2022-01-07T10:26:52-08:00"
    },
    {
      "path": "resources.html",
      "title": "Course resources",
      "author": [],
      "contents": "\n\nContents\nR\nGit\n\n\nSome Useful Resource for this Course:\n\nR\nSo that we all are working with the same code make sure you have the most recent version of\nR (4.0.3 )\nRStudio (1.3.1093) installed,\nYou will also need the following libraries to get started\n**tidyverse**\nGit\nGitHub\nFrom ESM 206 you already have a GitHub account, but if not request a GitHub account.\nMake sure you include this in the initial survey on Gauchospace\nThere is a lot of information on the web that you can use to refresh / learn to take advantage of Git\nSoftware Carpentry tutorial: Version Control with Git\nHappy Git and GitHub for the useR\nIntroduction to Open Data Science, chapter 4: GitHub\nIf you need more help with Git let us know and we will set a time for a tutorial :)\n\n\n\n",
      "last_modified": "2022-01-07T10:26:53-08:00"
    },
    {
      "path": "topic_1.html",
      "title": "Topic 1: Programming: Basics and Best Practices",
      "author": [],
      "contents": "\n\nContents\nProtocols and Guidance on how to best use this class\nWhat we will learn - some more details\nWhat is a program\nProgramming Languages\nProgramming Fundamentals\nBREAKOUT GROUP TASK:\nBest Practices for Software Development\nSummary of Best Practices\nCommon Coding/Software Engineering Issues\nAutomated Tools for Best Practices in Software Engineering\n\nProtocols and Guidance on how to best use this class\nLearning to program is hard and I may not always explain in a way that is accessible to you - So if you don’t understand something ASK , you will help me to learn how to explain (or find an answer if I don’t know it) and you will help others\nProgramming gets better with practice and play - Don’t just read the Rmarkdown - try the code, try variations on the ideas presented, make up stuff to try, get your feet wet\nProgramming means making mistakes, expect it, stay calm and try again - if you get frustrated step away and come back; be creative\nSupport each other\nwhen working in groups, pay attention to your partner, if they are not at your skill level, help them learn - recognize that we all have different backgrounds\n\nBe involved as network/community of programmers\nwe will have two forums on Gauchospace\nQuestions and Answers forum use this to ask and answer questions about course material\nRecommended Tools forum use to to share stuff beyond what I present in class\nother ways of doing things\ncool, fun, useful tools in R or any other platform\n\nBoth Forums are accessible at the top of the course Gauchospace site\nYou must post at least once to BOTH forums before the end of the course (but hopefully you will post more often)\n\nIf you are really struggling, reach out to Will or myself, we can help (or if you just want to chat about something )\nWhat we will learn - some more details\nModular programming: Designing building blocks or functions\nData structures, operations and flow control (general programmings skills we use for manipulating data inside each block)\nAutomated (or semi-automated) Tools for good programming practice\ntesting\ndocumentation\nworkflow for sharing programs/packages with others\n\nThe course features R for programming, Git for version control, Markdown for workflow, and GitHub for collaboration and publishing, but many concepts would be applicable in other software design tools.\nWhat is a program\nA program is a set of instructions for a computer to follow\nPrograms are often used to manipulate data (in all type and formats you discussed last week)\nSimple to complex\nscripts that you save in R-Markdown\ninstructions to analyze relationships in census data and visualize them\na model of global climate\n\nProgramming Languages\nPrograms can be written in many different languages (all have their strengths and weakness)\nLanguages expect instructions in a particular form (syntax) and then translate them to be readable by the computer\nLanguages have evolved to make it help users write programs that are easy to understand, re-use, extend, test, run quickly, use lots of data…\nProgramming Fundamentals\nOperations (=,+,-,…concatenate, copy)\nData structures (simple variables, arrays, lists…)\nControl structures (if then, loops)\nModules…Functions\nThese concepts common to all languages through the syntax may be different\nBREAKOUT GROUP TASK:\nBased on whatever programming/coding experience you have had - come up with what you think are 4 best practices Write them into an Rmarkdown document\nBest Practices for Software Development\nWilson G, Aruliah DA, Brown CT, Chue Hong NP, Davis M, et al. (2014) Best Practices for Scientific Computing. PLoS Biol 12(1): e1001745. doi:10.1371/journal.pbio.1001745\nBlanton, B and Lenhardt, C 2014. A Scientist’s Perspective on Sustainable Scientific Software. Journal of Open Research Software 2(1):e17, DOI: http://dx.doi.org/10.5334/jors.ba\nAlternative View\nSummary of Best Practices\nWilson et al, Summary Box\nCommon Coding/Software Engineering Issues\nUnreadable code (hard to understand, easy to forget how it works, hard to find errors, hard to expand)\nOverly complex, disorganized code (hard to find errors; hard to modify-expand)\nInsufficient testing (both during development and after)\nNot tracking code changes (multiple versions, which is correct?)\nAutomated Tools for Best Practices in Software Engineering\nAutomated tools (really useful for more complex code development ( note that GP’s often create programs > 100 lines of code)\nAutomated documentation\nhttp://www.stack.nl/~dimitri/doxygen/\nhttp://roxygen.org/roxygen2-manual.pdf\nAutomated test case development\nhttp://r-pkgs.had.co.nz/tests.html\nAutomated code evolution tracking (Version Control) https://github.com/\n\n\n\n",
      "last_modified": "2022-01-07T10:26:54-08:00"
    },
    {
      "path": "topic_10.html",
      "title": "Topic 10: Inserting tables",
      "author": [],
      "contents": "\n\nContents\nUse the Visual Editor\nOther options\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_10.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nUse the Visual Editor\nIf you want to create a table in your R Markdown from scratch that is easily editable (e.g., a table of Assignment due dates or something), it might be easiest to just make the thing manually right in your R Markdown document.\nTo do that, I strongly recommend using the RStudio Visual Editor (in RStudio versions >= 1.4), which has an easy-to-use Table maker similar to what you’d see in Word or Google Docs.\nOpen the .Rmd in which you want to add the table\nSwitch over to the visual editor by clicking on the compass-looking icon in the top right of your .Rmd screen, to the right of the ‘Run’ and ‘Publish’ buttons (hover text is “Switch to visual markdown editor”)\nIn the Visual Editor menu, click on Table, then in the dropdown Menu click ‘Insert Table’…and create & populate your new table like you would normally in non-markdown tools\nOther options\nThere are a bunch of different ways to add & format tables in R Markdown (see several of many options in David Keyes’ post on Making Beautiful Tables in R). I think most of them are most useful when you’re trying to make a finalized table with data in it, but if you really want to beautify your website tables there are options.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:55-08:00"
    },
    {
      "path": "topic_2.html",
      "title": "Topic 2: Update site title and subtitle",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_2.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nOne of the first things you’ll want to do is update your site title, subtitle, and the short link on the right side of the navbar.\nHere’s how:\nThe main title and subtitle for the home page live in the YAML of the index.Rmd file. Open it in your project, update the title and description fields in the YAML, save, then build your site (In RStudio: Build > Build Website) to see the updated title.\nThe label for the short link in the upper right of the page (right side of the navigation bar) is specified in the _site.yml page. Open the _site.yml file in your project, update the Title field, save, and rebuild the site to see your update.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:55-08:00"
    },
    {
      "path": "topic_3.html",
      "title": "Topic 3: Adding images",
      "author": [],
      "contents": "\n\nContents\nWhere should I save my images?\nHow do I make images show up on my site?\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_3.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nWhere should I save my images?\nDrop images you want to include on your site into the existing img folder within your R Project (or make your own folder for images, set up a subfolder structure, etc.) - as long as you can easily point to them within your project.\nHow do I make images show up on my site?\nThere are a bunch of ways to add images in an R Markdown document (see more examples from the R Markdown Cookbook here).\nI recommend using knitr::include_graphics(\"path_to_image\").\nFor example, if there is an image saved as cool_dogs.jpg in the img folder, then you can add this to your R Markdown document by adding (within a code chunk):\n\n```{r, echo = FALSE}\n  knitr::include_graphics(\"img/cool_dogs.jpg\")\n```\nYou can also update the size of the image, add a caption, etc. by updating the code chunk header, e.g.:\n\n```{r, echo = FALSE, out.width = \"50%\", fig.cap = \"Some cool dogs!\"}\n  knitr::include_graphics(\"img/cool_dogs.jpg\")\n```\nFor example, the image usgs_sat.jpeg is in the img folder of this template. I can have it show up here by include a code chunk that looks like this:\n\n```{r, echo = FALSE, out.width = \"80%\", fig.cap = \"USGS image of Mississippi River.\"}\n  knitr::include_graphics(\"img/usgs_sat.jpeg\")\n```\nWhich creates:\n\n\n\nFigure 1: USGS image of Mississippi River.\n\n\n\n\n\n\n",
      "last_modified": "2022-01-07T10:26:55-08:00"
    },
    {
      "path": "topic_4.html",
      "title": "Topic 4: Change the theme",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_4.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nThe bells and whistles of this MEDS template (colors, fonts, spacing, etc.) are customized in the theme.css file in your Project root.\nIf you love css or want to make changes, you’re encouraged to customize your site! There is minor annotation in the css file, but honestly this will probably just take quite a bit of Inspect Element to figure out what to change.\nFonts: If you specifically want to know how to change the site fonts, see here.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:56-08:00"
    },
    {
      "path": "topic_5.html",
      "title": "Topic 5: Basic formatting",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_5.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you’re familiar with markdown, use standard syntax to update font styles, add bulleted lists, subscripts/superscripts, etc. (or learn more from the R Markdown cheatsheet).\nIf you’re not familiar with markdown and want an easier way to update formatting, there is a Visual Editor in RStudio versions > 1.4. It is absolutely worth it to check it out for easier formatting of text, images, tables, citations, and more. Read more about the new RStudio Visual Editor here.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:56-08:00"
    },
    {
      "path": "topic_6.html",
      "title": "Topic 6: Internal & external links",
      "author": [],
      "contents": "\n\nContents\nLinking to internal parts of your site\nExternal links\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_6.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nLinking to internal parts of your site\nSometimes you’ll want to have a link to another page in your website. How? Use the format [text](link_to_this_page.html).\nFor example, if I want to link here to the Resources page, within my .Rmd that looks like this:\n  Find more resources [here](resources.html). \nWhich, when built, looks like this:\nFind more resources here.\nExternal links\nSame thing, just add the full URL within the parentheses. For example, to link to UCSB’s home page that would look like:\n  Learn more about [UCSB](https://www.ucsb.edu/).\n  \nWhich when built looks like this:\nLearn more about UCSB.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:56-08:00"
    },
    {
      "path": "topic_7.html",
      "title": "Topic 7: Remove tables of contents",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_7.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIn this template, you’ll notice that a Table of Contents is automatically created on pages with headings (starting with Level 2 headers as top-level items).\nTo remove the auto-table of contents, open the _site.yml file. In the output section, change the toc: and toc_float: fields to false.\nThat section in _site.yml would then look like this, and the table of contents won’t appear:\noutput:\n  distill::distill_article:\n    toc: false\n    toc_float: false\n\n\n\n",
      "last_modified": "2022-01-07T10:26:57-08:00"
    },
    {
      "path": "topic_8.html",
      "title": "Topic 8: Dropdown list from a navigation bar item",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_8.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you look at this template, you’ll notice that some navigation bar items go directly to a single page, while the Modules item takes you to a dropdown menu.\nTo create a dropdown menu of pages:\nCreate and save the pages as individual R Markdown documents as described here.\nOpen the _site.yml file. In the navbar section, create a menu with the pages as linked items using a structure like this:\n   - text: \"Dropdown menu\"\n      menu:\n        - text: \"First dropdown item\"\n          href: item_1.html\n        - text: \"Second dropdown item\"\n          href: item_2.html\nThe example above would only work if the new pages were created as item_1.Rmd and item_2.Rmd, so that when the site is built the rendered item_1.html and item_2.html files exist in the docs output directory.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:57-08:00"
    },
    {
      "path": "topic_9.html",
      "title": "Topic 9: Changing site fonts",
      "author": [],
      "contents": "\n\nContents\nFonts are imported and specified in theme.css\nUse different fonts\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_9.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nYou are welcome to use any fonts you want on your website. Here, only using Google fonts is described (there are other methods for downloading fonts and adding, not included here).\nFonts are imported and specified in theme.css\nIn your Project in RStudio, open the theme.css file.\nNear the top, you’ll see some lines that look like this:\n/* Header font */\n@import url('https://fonts.googleapis.com/css2?family=Sanchez&display=swap');\n\n/* Body font */\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400&display=swap');\n\n/* Code font (Roboto Mono) */\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400&display=swap');\nThose are the import command to get 3 different Google fonts (Sanchez, Nunito Sans, and Roboto Mono). You can explore many different Google fonts here.\nUse different fonts\nFind a Google Font you like.\nClick on the font. To the right of the font example text, you should see an option to ‘+ Select this style’. Click the one(s) you want to select.\nThat will probably bring up a side menu. If you don’t see that side menu, you can see your selected styles at any time by clicking on the top-right menu icon that is a grid with 3 squares and a plus sign - hovering reveals this is to ‘View your selected families’. In the Use on the web section of the side menu that appears, select the radio button for @import. It’ll look weird like this (for the Zen Dots Google Font):\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=Zen+Dots&display=swap');\n    <\/style> \nCopy everything BETWEEN (but excluding) the ending <style> and <\/style>tags\nPaste the @import line you’ve copied into the top section of theme.css near the other fonts imported there. It is now available for use in your theme.\nUpdate the css with your new fonts, replacing the existing font names with the name you’ve imported. You might want to use a Find & Replace All if you want to make sure you’re updating a font everywhere it appears in the current theme.\nRepeat for as many different fonts as you want to update in your theme.\n\n\n\n",
      "last_modified": "2022-01-07T10:26:58-08:00"
    }
  ],
  "collections": []
}
